shader_type canvas_item;

uniform float PI1 = 3.141592653589793238;
uniform float TWOPI = 6.283185307179586;
uniform float NUM_EXPLOSIONS = 8.0;
uniform float NUM_PARTICLES = 70.0;

uniform vec3 MOD3 = vec3(0.1031,0.11369,0.13787);

uniform float firework_size : hint_range(0.1, 5.0) = 1.0;
uniform float speed : hint_range(0.1, 5.0) = 1.0;
uniform float pixelation : hint_range(0.0, 64.0) = 0.0; // 0 = no pixelation

vec3 hash31(float p) {
    vec3 p3 = fract(vec3(p) * MOD3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x + p3.z)*p3.y, (p3.y + p3.z)*p3.x));
}

float hash12(vec2 p) {
    vec3 p3 = fract(vec3(p.xy, 0.0) * MOD3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}

float lighter(vec2 uv, vec2 pos, float size) {
    uv -= pos;
    size *= size;
    return size / dot(uv, uv);
}

vec3 explosion(vec2 uv, vec2 p, float seed, float t) {
    vec3 col = vec3(0.);
    vec3 en = hash31(seed);
    vec3 baseCol = en;

    for (float i = 0.; i < NUM_PARTICLES; i++) {
        vec3 n = hash31(i) - 0.5;

        vec2 startP = p - vec2(0., t * t * 0.1) * firework_size;
        vec2 endP = startP + normalize(n.xy) * n.z * firework_size;

        float pt = 1. - pow(t - 1., 2.);
        vec2 pos = mix(p, endP, pt);
        float size = mix(0.01, 0.005, smoothstep(0., 0.1, pt));
        size *= smoothstep(1., 0.1, pt);
        size *= firework_size;

        float sparkle = (sin((pt + n.z) * 100.) * 0.5 + 0.5);
        sparkle = pow(sparkle, pow(en.x, 3.) * 50.) * mix(0.01, 0.01, en.y * n.y);
        float B = smoothstep(en.x - en.z, en.x + en.z, t) * smoothstep(en.y + en.z, en.y - en.z, t);
        size += sparkle * B;

        col += baseCol * lighter(uv, pos, size);
    }

    return col;
}

void fragment() {
    vec2 iResolution = vec2(1024., 600.);
    vec2 uv = FRAGCOORD.xy / iResolution.xy;

    // Apply pixelation if pixelation > 0
    if (pixelation > 0.0) {
        uv = floor(uv * pixelation) / pixelation;
    }

    uv.x -= 0.5;
    // Removed aspect ratio scaling so it doesn't stretch/move with camera
    // uv.x *= iResolution.x / iResolution.y;

    float t = TIME * 0.5 * speed;
    vec3 c = vec3(0.);

    for (float i = 0.; i < NUM_EXPLOSIONS; i++) {
        float et = fract(t + i * 1234.45235);
        float id = floor(t + i * 1234.45235);

        vec2 p = hash31(id).xy;
        p.x -= 0.5;
        p.x *= 1.6;

        c += explosion(uv, p, id, et);
    }

    float alpha = clamp(length(c), 0.0, 1.0);
    if (alpha < 0.01) {
        discard;
    }

    COLOR = vec4(c, alpha);
}
